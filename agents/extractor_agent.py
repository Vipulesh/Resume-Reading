import os
from dotenv import load_dotenv
import google.generativeai as genai
from google.ai.generativelanguage_v1beta.types import content
import json

class ExtractorAgent:
    def __init__(self):
        # Initialize API key for Gemini model
        load_dotenv()
        api_key = os.getenv("GEMINI_API_KEY1")
        if not api_key:
            raise EnvironmentError("GEMINI_API_KEY environment variable not set.")
        genai.configure(api_key=api_key)

        # Define structured output schema
        self.schema = content.Schema(
            type=content.Type.OBJECT,
            properties={
                "personal_info": content.Schema(
                    type=content.Type.OBJECT,
                    properties={
                        "name": content.Schema(type=content.Type.STRING),
                        "phone_no": content.Schema(type=content.Type.STRING),  # Change to STRING if storing formatted numbers
                        "email": content.Schema(type=content.Type.STRING),
                    }
                ),
                "education": content.Schema(
                    type=content.Type.ARRAY,  # Change to ARRAY to support multiple educational entries
                    items=content.Schema(
                        type=content.Type.OBJECT,
                        properties={
                            "degree": content.Schema(type=content.Type.STRING),
                            "university": content.Schema(type=content.Type.STRING),
                        }
                    )
                ),
                "work_experience": content.Schema(
                    type=content.Type.ARRAY,  # Change to ARRAY to support multiple work experiences
                    items=content.Schema(
                        type=content.Type.OBJECT,
                        properties={
                            "company": content.Schema(type=content.Type.STRING),
                            "role": content.Schema(type=content.Type.STRING),
                            "description": content.Schema(type=content.Type.STRING),
                        }
                    )
                ),
                "skills": content.Schema(
                    type=content.Type.ARRAY,  # Define skills as an array
                    items=content.Schema(type=content.Type.STRING)  # Each skill is a string
                )
            }
        )

        # Initialize Gemini model with schema
        self.model = genai.GenerativeModel(
            model_name="gemini-1.5-flash",
            generation_config={"response_schema": self.schema}
        )

    def extract_entities(self, prompt):
        """
        Extracts structured information from resume text using Gemini.
        
        Args:
            prompt (str): The resume text to extract information from.
        
        Returns:
            dict: Structured information extracted from the resume.
        """
        # Generate structured content using the model
        prompt = """
        Extract the following structured information and return a dictionary without any additional text:
        "personal_info": content.Schema(
                    type=content.Type.OBJECT,
                    properties={
                        "name": content.Schema(type=content.Type.STRING),
                        "phone_no": content.Schema(type=content.Type.NUMBER),
                        "email": content.Schema(type=content.Type.STRING),
                    }
                ),
                "education": content.Schema(
                    type=content.Type.OBJECT,
                    properties={
                        "degree": content.Schema(type=content.Type.STRING),
                        "university": content.Schema(type=content.Type.STRING),
                    }
                ),
                "work_experience": content.Schema(
                    type=content.Type.OBJECT,
                    properties={
                        "company": content.Schema(type=content.Type.STRING),
                        "role": content.Schema(type=content.Type.STRING),
                        "description": content.Schema(type=content.Type.STRING),
                    }
                ),
                "skills": content.Schema(
                    type=content.Type.ARRAY,  # Define skills as an array
                    items=content.Schema(type=content.Type.STRING)  # Each skill is a string
                )
            }
        """ + prompt
        response = self.model.generate_content(prompt)
        if response and response.text:
            return response.text
        else:
            raise ValueError("No content generated by the model.")
    
#     def _extractor(prompt, validate=False):
#         """
#         Extracts structured information from resume text using Gemini
#         """
#         genai.configure(api_key=os.environ["GEMINI_API_KEY"])
 
#  # Define the schema for structured output
#         schema = {
#         "type": content.Type.OBJECT,
#         "properties": {
#         "personal_info": {
#         "name": content.Schema(type=content.Type.STRING),
#         "phone_no": content.Schema(type=content.Type.NUMBER),
#         "email": content.Schema(type=content.Type.STRING),
#         },
#         "education": {
#         "degree": content.Schema(type=content.Type.STRING),
#         "university": content.Schema(type=content.Type.STRING),
#         },
#         "work_experience": {
#         "company": content.Schema(type=content.Type.STRING),
#         "role": content.Schema(type=content.Type.STRING),
#         "description": content.Schema(type=content.Type.STRING),
#         }
#         }
#         }
#         model = genai.GenerativeModel(
#         model_name="gemini-1.5-flash",
#         generation_config={"response_schema": schema}
#         )
 
#         return model.generate_content(prompt).text

def run_agent(resume_text):
    extractor_agent = ExtractorAgent()
    extracted_data = extractor_agent.extract_entities(resume_text)
    return extracted_data